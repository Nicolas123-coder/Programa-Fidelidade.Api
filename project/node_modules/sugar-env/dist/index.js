"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DEVELOPMENT = exports.PRODUCTION = exports.STAGING = exports.REVIEW = exports.TEST = exports.current = exports.is = exports.get = exports.has = void 0;
const environments_1 = __importDefault(require("./structures/environments"));
const has = (name) => {
    return name in process.env
        && typeof process.env[name] === 'string'
        && process.env[name].length > 0;
};
exports.has = has;
function get(names, fallback = null) {
    if (!Array.isArray(names))
        return get([names], fallback);
    const value = names.filter(name => has(name))
        .map(name => process.env[name])
        .shift();
    if (!value)
        return fallback !== null ? fallback.toString() : fallback;
    return value;
}
exports.get = get;
function _getAs(fn) {
    function getAs(names, fallback = null) {
        const value = get(names);
        if (value === null) {
            return fallback;
        }
        return fn(value);
    }
    return getAs;
}
get.base64 = _getAs((value) => Buffer.from(value, 'base64').toString('utf8'));
get.boolean = _getAs((value) => ['1', 'true'].includes(value.toLowerCase()));
get.int = _getAs((value) => parseInt(value, 10));
get.float = _getAs((value) => parseFloat(value));
get.url = _getAs((value) => value.endsWith('/') ? value : `${value}/`);
const current = process.env.NODE_ENV || environments_1.default.DEVELOPMENT;
exports.current = current;
const is = (environment) => {
    return current === environment;
};
exports.is = is;
const entrypoint = (current) => ({
    is: (environment) => current === environment
});
entrypoint.is = is;
entrypoint.get = get;
entrypoint.has = has;
entrypoint.current = current;
const TEST = environments_1.default.TEST;
exports.TEST = TEST;
const REVIEW = environments_1.default.REVIEW;
exports.REVIEW = REVIEW;
const STAGING = environments_1.default.STAGING;
exports.STAGING = STAGING;
const PRODUCTION = environments_1.default.PRODUCTION;
exports.PRODUCTION = PRODUCTION;
const DEVELOPMENT = environments_1.default.DEVELOPMENT;
exports.DEVELOPMENT = DEVELOPMENT;
entrypoint.TEST = TEST;
entrypoint.REVIEW = REVIEW;
entrypoint.STAGING = STAGING;
entrypoint.PRODUCTION = PRODUCTION;
entrypoint.DEVELOPMENT = DEVELOPMENT;
exports.default = entrypoint;
module.exports = entrypoint;
